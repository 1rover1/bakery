# Copyright 2017 Insurance Australia Group Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
- hosts: localhost
  connection: local

  vars:
    env: Prod
    application: Bakery
    launched_by: iam_user
    prefix: ""
    stack_name: "{{ prefix }}CheckAdminAccess"
    config_file: "../configuration/config.yml"

  tasks:
    - name: Include vars from config.yml
      include_vars:
        file: "{{ config_file }}"

    # Generate new checksum on lambda function change
    - stat:
        path: "{{ playbook_dir }}/check_admin_access/check_admin_access.py"
        get_md5: yes
      register: output

    # Get checksum value
    - set_fact:
        checksum: "{{ output.stat.md5 }}"

    - name: "Create Lambda function zip file"
      archive:
        path: "{{ playbook_dir }}/check_admin_access/check_admin_access.py"
        dest: "{{ playbook_dir }}/check_admin_access/check_admin_access.{{ checksum }}.zip"
        format: zip

    - name: "Upload Lambda function zip file to s3 bucket"
      s3:
        bucket: "{{ bakery_cf_bucket }}"
        object: "check_admin_access.{{ checksum }}.zip"
        src: "{{ playbook_dir }}/check_admin_access/check_admin_access.{{ checksum }}.zip"
        mode: put
        region: "{{ REGION }}"
      register: s3
      until: s3|success
      retries: 5
      delay: 10

    - name: "Run main CloudFormation template"
      cloudformation:
        stack_name: "{{ stack_name }}"
        state: present
        template: "{{ playbook_dir }}/check_admin_access/check_admin_access.yml"
        template_parameters:
          Prefix: "{{ prefix }}"
          CheckSum: "{{ checksum }}"
          LambdaS3Bucket: "{{ bakery_cf_bucket }}"
          SlackChannel: "{{ SlackChannel }}"
          SlackChannelHookUrl: "{{ SlackChannelHookUrl }}"
          AdminGroups: " {{ AdminGroups }}"
        tags:
          Environment: "{{ env }}"
          Billing Code: "{{ BillingCode }}"
          Application: "{{ application }}"
          Launched By: "{{ launched_by }}"
        region: "{{ REGION }}"

    - name: "Get Cloudformation stack info"
      cloudformation_facts:
        stack_name: "{{ stack_name }}"
      register: stack

    - name: "Get Ansible Facts for Cloudformation Stack"
      set_fact:
        output: "{{ stack.ansible_facts.cloudformation }}"

    - name: "Get Cloudformation Stack Status"
      set_fact:
        stack_status:  "{{ output[item]['stack_description']['stack_status'] }}"
      with_items: "{{ stack_name }}"

    - fail:
        msg: "Build Failed. Stack status: {{ stack_status }}"
      when:
        - stack_status != "CREATE_COMPLETE"
        - stack_status != "UPDATE_COMPLETE"
